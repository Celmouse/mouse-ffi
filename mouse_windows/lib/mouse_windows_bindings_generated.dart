// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/mouse_windows.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class MouseWindowsBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  MouseWindowsBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  MouseWindowsBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// @brief Moves the mouse smooth adding x and y accordingly to the current mouse position.
  ///
  /// If the mouse is in (500, 500) mouseMove(1,1) will move the mouse to (501, 501)
  /// This function moves the mouse cursor to the given (x, y) coordinates on the screen.
  ///
  /// @param x The x-value to add to the move current coordinates.
  /// @param y The y-cvalue to add to the move current coordinates.
  void MouseMove(
    double x,
    double y,
  ) {
    return _MouseMove(
      x,
      y,
    );
  }

  late final _MouseMovePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Float, ffi.Float)>>(
          'MouseMove');
  late final _MouseMove =
      _MouseMovePtr.asFunction<void Function(double, double)>(isLeaf: true);

  /// @brief This function moves the mouse cursor to the given (x, y) coordinates on the screen.
  ///
  /// This function moves the mouse cursor to the given (x, y) coordinates on the screen.
  ///
  /// @param x The x-coordinate to move the mouse cursor to.
  /// @param y The y-coordinate to move the mouse cursor to.
  void MouseMoveTo(
    double x,
    double y,
  ) {
    return _MouseMoveTo(
      x,
      y,
    );
  }

  late final _MouseMoveToPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Float, ffi.Float)>>(
          'MouseMoveTo');
  late final _MouseMoveTo =
      _MouseMoveToPtr.asFunction<void Function(double, double)>(isLeaf: true);

  /// @brief This function performs a double click.
  ///
  /// This function performs a double click with the left mouse button.
  void DoubleClick() {
    return _DoubleClick();
  }

  late final _DoubleClickPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('DoubleClick');
  late final _DoubleClick =
      _DoubleClickPtr.asFunction<void Function()>(isLeaf: true);

  /// @brief This function scrolls the mouse wheel.
  ///
  /// This function scrolls the mouse wheel by a specific pixels amount.
  ///
  /// @param x The x-value to scroll the mouse wheel.
  /// @param y The y-value to scroll the mouse wheel.
  /// @param amount The amount of scrolling to perform.
  void MouseScroll(
    int x,
    int y,
    int amount,
  ) {
    return _MouseScroll(
      x,
      y,
      amount,
    );
  }

  late final _MouseScrollPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int, ffi.Int, ffi.Int)>>(
          'MouseScroll');
  late final _MouseScroll =
      _MouseScrollPtr.asFunction<void Function(int, int, int)>(isLeaf: true);

  /// @brief This function performs a mouse click.
  ///
  /// This function performs a mouse click with the given button.
  ///
  /// @param button The button to click.
  void MouseClick(
    int button,
  ) {
    return _MouseClick(
      button,
    );
  }

  late final _MouseClickPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>('MouseClick');
  late final _MouseClick =
      _MouseClickPtr.asFunction<void Function(int)>(isLeaf: true);

  /// @brief This function holds the left mouse button.
  ///
  /// This function holds the left mouse button.
  void MouseHoldLeftButton() {
    return _MouseHoldLeftButton();
  }

  late final _MouseHoldLeftButtonPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('MouseHoldLeftButton');
  late final _MouseHoldLeftButton =
      _MouseHoldLeftButtonPtr.asFunction<void Function()>(isLeaf: true);

  /// @brief This function releases the left mouse button.
  ///
  /// This function releases the left mouse button.
  void MouseReleaseLeftButton() {
    return _MouseReleaseLeftButton();
  }

  late final _MouseReleaseLeftButtonPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'MouseReleaseLeftButton');
  late final _MouseReleaseLeftButton =
      _MouseReleaseLeftButtonPtr.asFunction<void Function()>(isLeaf: true);
}

/// Estrutura para armazenar a largura e altura da tela
abstract class MouseButton {
  static const int kMouseButtonLeft = 0;
  static const int kMouseButtonRight = 1;
  static const int kMouseButtonMiddle = 2;
}
